knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
# Load ggplot2
library(ggplot2)
#==========================================================#
# Topic: Does seed dispersal distance depend on seed size? #
#==========================================================#
# Hypothesis: Seed dispersal distance decreases with size
#
# Predictors: seed size (int - continuous: measured in mm)
#             tree height (int - continuous: measured in m)
#             slope (int - binary: 0/1 flat/sloped)
# Response: seed dispersal distance (int- continuous: measured in m)
#
# What is the distribution of my response? Would expect a normal (gaussian)
# distribution from a continuous response
# What is the distribution of my response? Would expect a normal (gaussian)
# distribution from a continuous response
# Set a random seed for reproducibility
set.seed(123)
?rnorm
# n= sample size
# mean = expected average from sample
# sd = standard deviation
# Define the number of observations
n <- 200
# Create a data frame with predictor variables: seed size, tree height, and slope
data <- data.frame(
seed_size = rnorm(n, mean = 15, sd = 4),  # Seed size in mm (average in sample from literature)
tree_height = rnorm(n, mean = 6, sd = 1),  # Simulated tree height in meters (estimate)
slope = factor(sample(c("Steep", "Not Steep"), n, replace = TRUE),
levels = c("Steep", "Not Steep"))
)
#Create dummy variables for slope since we only have 2 levels
data$slopedummy <- ifelse(data$slope == "Steep", 1, 0)
#Expected mean (intercept) for response (10) and predictor effects from hypothesis (estimates)
# Expect to have a negative correlation with seed size, a positive correlation with tree height and with slope
#create response variable
linear_combination <- 10 - 0.5 * data$seed_size + 1.5 * data$tree_height + 5* data$slopedummy
#draw from normal distribution using my linear combination with standard deviation of 5 (estimate)
data$dispersal_distance <- rnorm(n, linear_combination, sd = 5)
# Fit a linear regression model with response and predictors
model <- lm(dispersal_distance ~ seed_size + tree_height + slope, data = data)
# Scatterplot for seed size
plot(data$seed_size, data$dispersal_distance,
main = "Seed Size vs. Dispersal Distance",
xlab = "Seed Size (mm)",
ylab = "Dispersal Distance (m)",
pch = 16, col = "gray")
# Create new data with fixed values for tree_height (mean) and slope (Slope)
new_data_seed_size <- data.frame(tree_height = mean(data$tree_height), slope = "Steep", seed_size = seq(min(data$seed_size), max(data$seed_size), length.out = 100))
# We use the model to predict to this new data set.
# Need to specify the new data set as newdata.
# se.fit TRUE will return the error of the predicted mean.
predicted_values_seed_size <- predict(model, newdata = new_data_seed_size, se.fit = TRUE)
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit, col = "red", lwd =1.5)
# Add the lines for standard errors (confidence intervals) in red. 1.96*standard deviation is normal approximation of Confidence interval.
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit - 1.96 * predicted_values_seed_size$se.fit, col = "red", lty = 2)
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit + 1.96 * predicted_values_seed_size$se.fit, col = "red", lty = 2)
# Create new data with fixed values for tree_height (mean) and slope (Not Steep)
new_data_seed_size_no_slope <- data.frame(tree_height = mean(data$tree_height), slope = "Not Steep", seed_size = seq(min(data$seed_size), max(data$seed_size), length.out = 100))
predicted_values_seed_size_no_slope <- predict(model, newdata = new_data_seed_size_no_slope, se.fit = TRUE)
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit, col = "blue", lwd=1.5)
# Add the lines for standard errors (confidence intervals) in blue
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit - 1.96 * predicted_values_seed_size_no_slope$se.fit, col = "blue", lty = 2)
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit + 1.96 * predicted_values_seed_size_no_slope$se.fit, col = "blue", lty = 2)
legend("topright", legend = c("Steep", "Not Steep"), col= c("red", "blue"), lty = 1)
# Scatterplot for tree height
plot(data$tree_height, data$dispersal_distance,
main = "Tree Height vs. Dispersal Distance",
xlab = "Tree Height (m)",
ylab = "Dispersal Distance (m)",
pch = 16, col = "gray")
# Create new data with fixed values for seed_size (mean) and slope (Steep)
new_data_tree_height <- data.frame(tree_height = seq(min(data$tree_height), max(data$tree_height), length.out = 100), slope = "Steep", seed_size = mean(data$seed_size))
predicted_values_tree_height <- predict(model, newdata = new_data_tree_height, se.fit = TRUE)
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit, col = "red", lwd =1.5)
# Add the lines for standard errors (confidence intervals) in red
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit - 1.96 * predicted_values_tree_height$se.fit, col = "red", lty = 2)
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit + 1.96 * predicted_values_tree_height$se.fit, col = "red", lty = 2)
# Create new data with fixed values for tree_height (mean) and slope (Not Steep)
new_data_tree_height_no_slope <- data.frame(tree_height = seq(min(data$tree_height), max(data$tree_height), length.out = 100), slope = "Not Steep", seed_size = mean(data$seed_size))
predicted_values_tree_height_no_slope <- predict(model, newdata = new_data_tree_height_no_slope, se.fit = TRUE)
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit, col = "blue", lwd=1.5)
# Add the lines for standard errors (confidence intervals) in blue
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit - 1.96 * predicted_values_tree_height_no_slope$se.fit, col = "blue", lty = 2)
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit + 1.96 * predicted_values_tree_height_no_slope$se.fit, col = "blue", lty = 2)
legend("topright", legend = c("Steep", "Not Steep"), col= c("red", "blue"), lty = 1)
# Scatterplot for seed size
plot(data$seed_size, data$dispersal_distance,
main = "Seed Size vs. Dispersal Distance",
xlab = "Seed Size (mm)",
ylab = "Dispersal Distance (m)",
pch = 16, col = "gray")
# Create new data with fixed values for tree_height (mean) and slope (Slope)
new_data_seed_size <- data.frame(tree_height = mean(data$tree_height), slope = "Steep", seed_size = seq(min(data$seed_size), max(data$seed_size), length.out = 100))
# We use the model to predict to this new data set.
# Need to specify the new data set as newdata.
# se.fit TRUE will return the error of the predicted mean.
predicted_values_seed_size <- predict(model, newdata = new_data_seed_size, se.fit = TRUE)
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit, col = "red", lwd =1.5)
# Add the lines for standard errors (confidence intervals) in red. 1.96*standard deviation is normal approximation of Confidence interval.
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit - 1.96 * predicted_values_seed_size$se.fit, col = "red", lty = 2)
lines(new_data_seed_size$seed_size, predicted_values_seed_size$fit + 1.96 * predicted_values_seed_size$se.fit, col = "red", lty = 2)
# Create new data with fixed values for tree_height (mean) and slope (Not Steep)
new_data_seed_size_no_slope <- data.frame(tree_height = mean(data$tree_height), slope = "Not Steep", seed_size = seq(min(data$seed_size), max(data$seed_size), length.out = 100))
predicted_values_seed_size_no_slope <- predict(model, newdata = new_data_seed_size_no_slope, se.fit = TRUE)
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit, col = "blue", lwd=1.5)
# Add the lines for standard errors (confidence intervals) in blue
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit - 1.96 * predicted_values_seed_size_no_slope$se.fit, col = "blue", lty = 2)
lines(new_data_seed_size_no_slope$seed_size, predicted_values_seed_size_no_slope$fit + 1.96 * predicted_values_seed_size_no_slope$se.fit, col = "blue", lty = 2)
legend("topright", legend = c("Steep", "Not Steep"), col= c("red", "blue"), lty = 1)
# Scatterplot for tree height
plot(data$tree_height, data$dispersal_distance,
main = "Tree Height vs. Dispersal Distance",
xlab = "Tree Height (m)",
ylab = "Dispersal Distance (m)",
pch = 16, col = "gray")
# Create new data with fixed values for seed_size (mean) and slope (Steep)
new_data_tree_height <- data.frame(tree_height = seq(min(data$tree_height), max(data$tree_height), length.out = 100), slope = "Steep", seed_size = mean(data$seed_size))
predicted_values_tree_height <- predict(model, newdata = new_data_tree_height, se.fit = TRUE)
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit, col = "red", lwd =1.5)
# Add the lines for standard errors (confidence intervals) in red
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit - 1.96 * predicted_values_tree_height$se.fit, col = "red", lty = 2)
lines(new_data_tree_height$tree_height, predicted_values_tree_height$fit + 1.96 * predicted_values_tree_height$se.fit, col = "red", lty = 2)
# Create new data with fixed values for tree_height (mean) and slope (Not Steep)
new_data_tree_height_no_slope <- data.frame(tree_height = seq(min(data$tree_height), max(data$tree_height), length.out = 100), slope = "Not Steep", seed_size = mean(data$seed_size))
predicted_values_tree_height_no_slope <- predict(model, newdata = new_data_tree_height_no_slope, se.fit = TRUE)
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit, col = "blue", lwd=1.5)
# Add the lines for standard errors (confidence intervals) in blue
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit - 1.96 * predicted_values_tree_height_no_slope$se.fit, col = "blue", lty = 2)
lines(new_data_tree_height_no_slope$tree_height, predicted_values_tree_height_no_slope$fit + 1.96 * predicted_values_tree_height_no_slope$se.fit, col = "blue", lty = 2)
legend("topright", legend = c("Steep", "Not Steep"), col= c("red", "blue"), lty = 1)
sample_sizes <- c(runif(10, 250, 500))
mean_temperature <- runif(10, 3, 15)
mean_temperature <- sort(runif(10, 3, 15))
mean_precipitation <- runif(10, 0, 200)
linear_predictor <- 1 - 0.3* mean_temperature - 0.4*mean_precipitation
plogis(linear_predictor)
counts <- round(runif(10, min = 0, max = sample_sizes))
counts2 <- rbinom(samples, sample_sizes, 0.3)
samples <-  10
counts2 <- rbinom(samples, sample_sizes, 0.3)
sample_sizes
sample_sizes <- floor(runif(samples, 250, 500))
counts2 <- rbinom(samples, sample_sizes, 0.3)
cat(counts1)
counts1 <- round(runif(samples, min = 0, max = sample_sizes))
cat(counts2)
cat(counts1)
df <- data.frame(sample_sizes = sample_sizes,
mean_temperature =mean_temperature,
mean_precipitation = mean_precipitation )
df$mean_precipitation_scaled = scale(df$mean_precipitation)
set.seed(13)
samples <-  10
mean_temperature <- sort(runif(10, 3, 15))
mean_precipitation <- runif(samples, 0, 200)
sample_sizes <- floor(runif(samples, 250, 500))
df <- data.frame(sample_sizes = sample_sizes,
mean_temperature =mean_temperature,
mean_precipitation = mean_precipitation )
df$mean_temperature_scaled = scale(df$mean_temperature)
df$mean_precipitation_scaled = scale(df$mean_precipitation)
linear_predictor <- 1 - 0.1 *df$mean_precipitation_scaled - 0.2*df$mean_temperature_scaled
counts3 <- rbinom(samples, sample_sizes, plogis(linear_predictor))
counts3
linear_predictor
df$proportion_white_sneakers <- counts/sample_sizes
fm <- glm(proportion_white_sneakers ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'bionomial', data = df)
fm <- glm(proportion_white_sneakers ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'binomial', data = df)
df$counts_white_sneakers <- counts
fm <- glm(c(counts_white_sneakers, sample_sizes) ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'binomial', data = df)
fm <- glm(cbind(counts_white_sneakers, sample_sizes) ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'binomial', data = df)
summary(fm)
plgis(fm$coefficients)
plogis(fm$coefficients)
fm <- glm(cbind(counts_white_sneakers, sample_sizes-counts_white_sneakers) ~ mean_precipitation_scaled + mean_temperature_scaled,
weights = sample_sizes,
family = 'binomial', data = df)
summary(fm)
# Sample from a binomial with a probability dependent on the linear predictor, thus allow the parameter p to vary.
# Doing so, we scale variables and transform the linear predictor with the binomial link function
linear_predictor <- 1 - 0.1 *df$mean_precipitation - 0.2*df$mean_temperature
counts3 <- rbinom(samples, sample_sizes, plogis(linear_predictor))
cat(counts3)
set.seed(13)
samples <-  10
mean_temperature <- runif(10, 3, 15)
mean_precipitation <- runif(samples, 0, 200)
sample_sizes <- floor(runif(samples, 250, 500))
df <- data.frame(sample_sizes = sample_sizes,
mean_temperature = mean_temperature,
mean_precipitation = mean_precipitation )
df$mean_temperature_scaled = scale(df$mean_temperature)
df$mean_precipitation_scaled = scale(df$mean_precipitation)
counts1 <- round(runif(samples, min = 0, max = sample_sizes))
cat(counts1)
# Sample from a binomial with a fixed probability
counts2 <- rbinom(samples, sample_sizes, 0.3)
cat(counts2)
# Sample from a binomial with a probability dependent on the linear predictor, thus allow the parameter p to vary.
# Doing so, we scale variables and transform the linear predictor with the binomial link function
linear_predictor <- 1 - 0.2 *df$mean_precipitation_scaled - 0.2*df$mean_temperature_scaled
counts3 <- rbinom(samples, sample_sizes, plogis(linear_predictor))
cat(counts3)
# We use the last simulations for fitting the model.
df$proportion_white_sneakers <- counts3/sample_sizes
df$counts_white_sneakers <- counts3
fm <- glm(cbind(counts_white_sneakers, sample_sizes) ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'binomial', data = df)
summary(fm)
plogis(fm$coefficients)
fm <- glm(cbind(counts_white_sneakers, sample_sizes-counts_white_sneakers) ~ mean_precipitation_scaled + mean_temperature_scaled,
weights = sample_sizes,
family = 'binomial', data = df)
summary(fm)
plogis(fm$coefficients)
fm <- glm(cbind(counts_white_sneakers, sample_sizes) ~ mean_precipitation_scaled + mean_temperature_scaled, family = 'binomial', data = df)
summary(fm)
plogis(fm$coefficients)
install.packages('gauseR')
library(gauseR)
?gauseR
head(gauseR::gause_1936_AnE_f01)
summary(gauseR::gause_1936_AnE_f01)
?airquality
lm(airquality$Ozone ~  airquality$Wind)
summary(lm(airquality$Ozone ~  airquality$Wind))
summary(lm(airquality$Ozone ~  airquality$Temp))
plot(airquality$Ozone ~  airquality$Temp)
fm <- lm(airquality$Ozone ~  airquality$Temp)
lines(fm$fitted.values)
newdata = data.frame(Temp = seq(50, 100, 0.5))
preds = predict(fm, newdata = newdata, type = 'response')
newdat = data.frame(Temp = seq(50, 100, 0.5))
preds = predict(fm, newdata = newdat, type = 'response')
newdat = data.frame(Temp = sort(airquality$Temp))
preds = predict(fm, newdata = newdat, type = 'response')
lines(newpreds, col='red')
lines(preds, col='red')
lines(newdat$Temp, preds, col='red')
newdat = data.frame(Temp = airquality$Temp)
preds = predict(fm, newdata = newdat, type = 'response')
plot(airquality$Ozone ~  airquality$Temp)
lines(newdat$Temp, preds, col='red')
lines(newdat$Temp, preds, col='red', lwd=2)
?lm
library(Rpreles)
library(BayesianTools)
source("helpers.R")
setwd("~/PycharmProjects/physics_guided_nn/code")
setwd("~/PycharmProjects/physics_guided_nn/code")
#### install/load relevant packages ####
#devtools::install_github('MikkoPeltoniemi/Rpreles')
library(Rpreles)
library(BayesianTools)
source("helpers.R")
#set flags
make_nas_data = FALSE
ex_fit = FALSE
save_data = FALSE
if (make_nas_data){create_nas_data()}
if (ex_fit){example_fit()}
makesparse <- function(train){
ind <- seq(0,nrow(train), by=7)
tsmall <- train[ind,]
return(tsmall)
}
data_use = 'sparse'
scenario = 'exp2'
allsites <- read.csv("~/PycharmProjects/physics_guided_nn/data/allsites.csv")
allsites$date <- as.Date(allsites$date)
allsites$year <- format(allsites$date, format="%Y")
print(unique(allsites$year))
allsites$site <- gsub("[^a-zA-Z]", "", allsites$X)
if (scenario == 'exp2'){
allsites_train <- allsites[(allsites$site %in% c("sr","bz", "ly", "co")), ]
allsites_test <- allsites[((allsites$site == "h") & (allsites$year != 2004)), ]
}else if (scenario =='exp3'){
allsites_train <- allsites[(allsites$site %in% c("sr","bz", "ly", "co")), ]
allsites_train <- allsites_train[(allsites_train$year %in% c("2005", "2004")), ]
allsites_test <- allsites[((allsites$site == "h") & (allsites$year == "2008")), ]
}
if (data_use == 'sparse'){
allsites_train <- makesparse(allsites_train)
}
gpp_train <- matrix(NA, nrow=nrow(allsites_train), ncol=length(unique(allsites_train$site)))
gpp_test <- matrix(NA, nrow=nrow(allsites_test), ncol=length(unique(allsites_train$site)))
et_train <- matrix(NA, nrow=nrow(allsites_train), ncol=length(unique(allsites_train$site)))
et_test <- matrix(NA, nrow=nrow(allsites_test), ncol=length(unique(allsites_train$site)))
sw_train <- matrix(NA, nrow=nrow(allsites_train), ncol=length(unique(allsites_train$site)))
sw_test <- matrix(NA, nrow=nrow(allsites_test), ncol=length(unique(allsites_train$site)))
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Pmultisite_CVfit_", data_use, "_", scenario, ".Rdata"))
i <- 1
for (s in unique(allsites_train$site)){
#load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Pmultisite_fit_", s, "_", data_use, ".Rdata"))
test_df <- allsites_test
gpp_train[,i] <- PRELES(PAR=allsites_train$PAR, TAir=allsites_train$Tair, VPD=allsites_train$VPD, Precip=allsites_train$Precip, CO2=allsites_train$CO2, fAPAR=allsites_train$fapar, DOY=allsites_train$DOY, p=CVfit[,i])$GPP
gpp_test[,i] <- PRELES(PAR=test_df$PAR, TAir=test_df$Tair, VPD=test_df$VPD, Precip=test_df$Precip, CO2=test_df$CO2, fAPAR=test_df$fapar, p=CVfit[,i])$GPP
et_train[,i] <- PRELES(PAR=allsites_train$PAR, TAir=allsites_train$Tair, VPD=allsites_train$VPD, Precip=allsites_train$Precip, CO2=allsites_train$CO2, fAPAR=allsites_train$fapar, DOY=allsites_train$DOY,p=CVfit[,i])$ET
et_test[,i] <- PRELES(PAR=test_df$PAR, TAir=test_df$Tair, VPD=test_df$VPD, Precip=test_df$Precip, CO2=test_df$CO2, fAPAR=test_df$fapar, p=CVfit[,i])$ET
sw_train[,i] <- PRELES(PAR=allsites_train$PAR, TAir=allsites_train$Tair, VPD=allsites_train$VPD, Precip=allsites_train$Precip, CO2=allsites_train$CO2, fAPAR=allsites_train$fapar, DOY=allsites_train$DOY, p=CVfit[,i])$SW
sw_test[,i] <- PRELES(PAR=test_df$PAR, TAir=test_df$Tair, VPD=test_df$VPD, Precip=test_df$Precip, CO2=test_df$CO2, fAPAR=test_df$fapar, p=CVfit[,i])$SW
i <- i+1
}
## Update data set with new calibrated Preles predictions ##
allsites_train$GPPp <- apply(gpp_train, 1, mean)
allsites_test$GPPp <- apply(gpp_test, 1, mean)
allsites_train$ETp <- apply(et_train, 1, mean)
allsites_test$ETp <- apply(et_test, 1, mean)
allsites_train$SWp <- apply(sw_train, 1, mean)
allsites_test$SWp <- apply(sw_test, 1, mean)
allsites_test$site == 'h'
length(allsites_test$site == 'h')
length(allsites_train$site == 'h')
View(allsites_train)
allsites_train$site == 'h'
allsites_train$site
allsitesF <- rbind(allsites_train, allsites_test)
write.csv(allsitesF, file=paste0("~/PycharmProjects/physics_guided_nn/data/allsitesF_", scenario,"_", data_use, ".csv"), row.names = FALSE)

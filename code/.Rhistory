#### install/load relevant packages ####
#devtools::install_github('MikkoPeltoniemi/Rpreles')
library(Rpreles)
library(BayesianTools)
hyytiala_nas <- read.csv("~/Projects/physics_guided_nn/data/hyytialaNAS.csv")
hyytiala_nas$date <- as.Date(hyytiala_nas$date)
hyytiala_nas$year <- format(hyytiala_nas$date, format="%Y")
hyytiala <- read.csv("~/Projects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_nas2 <- hyytiala[(hyytiala$year %in% c( "2005", "2004")), ]
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_nas2 <- hyytiala[(hyytiala$year %in% c( "2005", "2004")), ]
hyytiala_p <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytialap.csv")
hyytiala_p <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala_p.csv")
hyytiala_p <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytialaF.csv")
hyytiala_p <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytialaNAS.csv")
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_nas2 <- hyytiala[(hyytiala$year %in% c( "2005", "2004")), ]
attach(hyytiala_nas)
load("~/PycharmProjects/physics_guided_nn/data/parameterRanges.rdata") # parameter defaults/ranges
# par # note that "-999" is supposed to indiate NA!
pars <- par # unfortunate naming "par" replaced by "pars"
rm(par)
pars[pars=="-999"] <- NA
pars # note that some parameters are set without uncertainty (e.g. soildepth)
pars[pars$name=="nu", 4] <- 10 # was 5
load("~/Projects/physics_guided_nn/data/parameterRanges.rdata") # parameter defaults/ranges
load("~/PycharmProjects/physics_guided_nn/data/parameterRanges.rdata")
pars <- par # unfortunate naming "par" replaced by "pars"
rm(par)
pars[pars=="-999"] <- NA
pars # note that some parameters are set without uncertainty (e.g. soildepth)
pars[pars$name=="nu", 4] <- 10 # was 5
library(BayesianTools)
# select the parameters to be calibrated:
pars2tune <- c(5:11, 14:18, 31) # note that we omit 32, as it refers to ET
thispar <- pars$def
names(thispar) <- pars$name
thispar
pars$def
gpp <-  PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$GPP #,
et <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$ET
ell <- function(pars, data=hyytiala_nas){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
# with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
#              sum(dnorm(ET, mean=et, sd = thispar[31], log=T))))
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_nas <- hyytiala[(hyytiala$year %in% c( "2005", "2004")), ]
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
summary(fit)
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
hyytiala_nas$GPPp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$GPP
hyytiala_nas$ETp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$ET
hyytiala_nas$SWp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$SW
## Very bad fit!
mae <- sum(abs(hyytiala_nas$GPP - hyytiala_nas$GPPp))/length(hyytiala_nas$GPPp)
plot(hyytiala_nas$GPPp)
ell <- function(pars, data=hyytiala_nas){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
sum(dnorm(ET, mean=et, sd = thispar[31], log=T))))
#with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
attach(hyytiala_nas)
gpp <-  PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$GPP #,
et <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$ET
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
## Add fitted parameter values:
hyytiala_nas$GPPp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$GPP
hyytiala_nas$ETp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$ET
hyytiala_nas$SWp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars_fit$def)$SW
## Very bad fit!
mae <- sum(abs(hyytiala_nas$GPP - hyytiala_nas$GPPp))/length(hyytiala_nas$GPPp)
plot(hyytiala_nas$GPPp)
sw <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$SW
ell <- function(pars, data=hyytiala_nas){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
sum(dnorm(ET, mean=et, sd = thispar[31], log=T))) +
sum(dnorm(SW, mean=sw, sd = thispar[31], log=T)))
#with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
ell <- function(pars, data=hyytiala_nas){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
sum(dnorm(ET, mean=et, sd = thispar[31], log=T))))
#with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
hyytiala_nas$GPPp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars$def)$GPP
hyytiala_nas$ETp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars$def)$ET
hyytiala_nas$SWp <- PRELES(PAR=hyytiala_nas$PAR, TAir=hyytiala_nas$Tair, VPD=hyytiala_nas$VPD, Precip=hyytiala_nas$Precip, CO2=hyytiala_nas$CO2, fAPAR=hyytiala_nas$fapar, p=pars$def)$SW
## Much better fit.
mae <- sum(abs(hyytiala_nas$GPP - hyytiala_nas$GPPp))/length(hyytiala_nas$GPPp)
library(Rpreles)
library(BayesianTools)
#load("EddyCovarianceDataBorealSites.rdata") # data for one site: s1-s4
#attach(s1)
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
attach(hyytiala_train)
load("~/Projects/physics_guided_nn/data/parameterRanges.rdata") # parameter defaults/ranges
# par # note that "-999" is supposed to indiate NA!
pars <- par # unfortunate naming "par" replaced by "pars"
rm(par)
pars[pars=="-999"] <- NA
pars # note that some parameters are set without uncertainty (e.g. soildepth)
# jetzt neu: S[max]
#pars[pars$name=="S[max]", 4] <- 45 # was 30
#  S[max]: tick
pars[pars$name=="nu", 4] <- 10 # was 5
pars2tune <- c(5:11, 14:18, 31) # note that we omit 32, as it refers to ET
thispar <- pars$def
names(thispar) <- pars$name
gpp <-  PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$GPP #,
et <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=thispar)$ET
#qq <- cbind(GPP, ET)
ell <- function(pars, data=hyytiala_train){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
# with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
#              sum(dnorm(ET, mean=et, sd = thispar[31], log=T))))
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit1 <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit1)$parametersMAP
p_preds <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=pars_fit$def)$GPP
sum(abs(GPP - p_preds))/length(p_preds)
ell <- function(pars, data=hyytiala_train){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T)) +
sum(dnorm(ET, mean=et, sd = thispar[31], log=T))))
#with(data, (sum(dnorm(GPP, mean=gpp, sd = thispar[31], log=T))))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit1 <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit1)$parametersMAP
p_preds <- PRELES(PAR=PAR, TAir=Tair, VPD=VPD, Precip=Precip, CO2=CO2, fAPAR=fapar, p=pars_fit$def)$GPP
sum(abs(GPP - p_preds))/length(p_preds)
#load("EddyCovarianceDataBorealSites.rdata") # data for one site: s1-s4
#attach(s1)
allsites <- read.csv("~/PycharmProjects/physics_guided_nn/data/allsites.csv")
allsites$date <- as.Date(allsites$date)
allsites$year <- format(allsites$date, format="%Y")
print(unique(allsites$year))
allsites$site <- substr(allsites$X, 1, 1)
source("~/PycharmProjects/physics_guided_nn/code/FitPRELES.R")
library(Rpreles)
predict <- function(x_test, data_use){
CVfit = read.csv(paste0("~/Projects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))[,2:6]
preds = matrix(nrow = nrow(x_test), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=x_test$PAR, TAir=x_test$Tair, VPD=x_test$VPD, Precip=x_test$Precip, CO2=x_test$CO2, fAPAR=x_test$fapar, p=CVfit[,i])$GPP
}
preds = apply(preds, 1, mean)
print(preds)
return(preds)
}
via <- function(data_use, gridsize = 200){
hyytiala <- read.csv("~/Projects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
hyytiala_test <- hyytiala_test[2:nrow(hyytiala_test),] # remove first day of year (Niklas, why?)
variables = c('PAR', 'Tair', 'VPD', 'Precip', 'fapar')
thresholds = data.frame('PAR' = c(0, 200), 'Tair'= c(-20, 40), 'VPD' = c(0, 60), 'Precip'= c(0, 100), 'fapar'= c(0, 1))
for (v in variables){
var_range = seq(thresholds[v][1,], thresholds[v][2,], length.out=gridsize)
day_names = c("mar", "jun", "sep", "dec")
x_test = hyytiala_test
mar = with(hyytiala_test, hyytiala_test[(date >= "2008-03-13" & date <= "2008-03-27"),])[,c(3:11)]
#mar = data.frame(as.list(colMeans(mar)))[rep(1, times=gridsize),]
#mar = data.frame(mar)
jun = with(hyytiala_test, hyytiala_test[(date >= "2008-06-14" & date <= "2008-06-28"),])[,c(3:11)]
#jun = data.frame(as.list(colMeans(jun)))[rep(1, times=gridsize),]
sep = with(hyytiala_test, hyytiala_test[(date >= "2008-09-13" & date <= "2008-09-27"),])[,c(3:11)]
#sep = data.frame(as.list(colMeans(sep)))[rep(1, times=gridsize),]
dec = with(hyytiala_test, hyytiala_test[(date >= "2008-12-14" & date <= "2008-12-28"),])[,c(3:11)]
#dec = data.frame(as.list(colMeans(dec)))[rep(1, times=gridsize),]
days = list(mar, jun, sep, dec)
n = 1
for (day in days){
print(nrow(day))
output = matrix(nrow = length(var_range), ncol = 15)
for (j in 1:length(var_range)){
day[v] = var_range[j]
preds = predict(day, data_use)
print(j)
output[j,] = preds
}
write.csv(output, paste0("~/Projects/physics_guided_nn/results/preles_", data_use, "_", v, "_via_cond_", day_names[n], ".csv"))
n = n+1
}
#output = cbind(var_range, output)
}
return(output)
}
out_full = via("full", gridsize = 200)
CVfit = read.csv(paste0("~/Projects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))[,2:6]
data_use='full'
Vfit = read.csv(paste0("~/Projects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))[,2:6]
CVfit = read.csv(paste0("~/Projects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))#[,2:6]
View(CVfit)
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))#[,2:6]
View(CVfit)
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_2009_", data_use, ".csv"))#[,2:6]
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_2009_", data_use, ".csv"))#[,2:6]
CVfit = load(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_2009_", data_use, "Rdata"))#[,2:6]
CVfit = load(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_2009_", data_use, ".Rdata"))#[,2:6]
library(Rpreles)
library(BayesianTools)
source("helpers.R")
#set flags
make_nas_data = FALSE
ex_fit = FALSE
save_data = FALSE
if (make_nas_data){create_nas_data()}
if (ex_fit){example_fit()}
#library(mvtnorm)
#dd <- dmvnorm(qq, mean=apply(mm, 2, mean),  log=T)
##========================##
## Singlesite Calibration ##
##========================##
makesparse <- function(train){
ind <- seq(0,nrow(train), by=7)
tsmall <- train[ind,]
return(tsmall)
}
singlesite_calibration <- function(data_use, save_data=FALSE){
load("~/Projects/physics_guided_nn/data/parameterRanges.rdata") # parameter defaults/ranges
# par # note that "-999" is supposed to indiate NA!
pars <- par # unfortunate naming "par" replaced by "pars"
rm(par)
pars[pars=="-999"] <- NA
pars # note that some parameters are set without uncertainty (e.g. soildepth)
# jetzt neu: S[max]
#pars[pars$name=="S[max]", 4] <- 45 # was 30
#  S[max]: tick
pars[pars$name=="nu", 4] <- 10 # was 5
# select the parameters to be calibrated:
pars2tune <- c(5:11, 14:18, 31) # note that we omit 32, as it refers to ET
thispar <- pars$def
names(thispar) <- pars$name
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
attach(hyytiala_train)
if (data_use == 'sparse'){
hyytiala_train <- makesparse(hyytiala_train)
}
CVfit <- matrix(NA, nrow=nrow(pars), ncol = length(unique(hyytiala_train$year)))
i <- 1
for (year in unique(hyytiala_train$year)){
df <- hyytiala_train[hyytiala_train$year != year,]
ell <- function(pars, data=df){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, sum(dnorm(df$GPP, mean=PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar , p=thispar)$GPP, sd=thispar[31], log=T)))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
save(fit, file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
CVfit[,i] <- pars_fit$def
}
save(CVfit, file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".Rdata"))
write.csv(CVfit, file=paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))
gpp_train <- matrix(NA, nrow=nrow(hyytiala_train), ncol=length(unique(hyytiala_train$year)))
gpp_test <- matrix(NA, nrow=nrow(hyytiala_test), ncol=length(unique(hyytiala_train$year)))
et_train <- matrix(NA, nrow=nrow(hyytiala_train), ncol=length(unique(hyytiala_train$year)))
et_test <- matrix(NA, nrow=nrow(hyytiala_test), ncol=length(unique(hyytiala_train$year)))
sw_train <- matrix(NA, nrow=nrow(hyytiala_train), ncol=length(unique(hyytiala_train$year)))
sw_test <- matrix(NA, nrow=nrow(hyytiala_test), ncol=length(unique(hyytiala_train$year)))
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".Rdata"))
i <- 1
for (year in unique(hyytiala_train$year)){
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
gpp_train[,i] <- PRELES(PAR=hyytiala_train$PAR, TAir=hyytiala_train$Tair, VPD=hyytiala_train$VPD, Precip=hyytiala_train$Precip, CO2=hyytiala_train$CO2, fAPAR=hyytiala_train$fapar, p=CVfit[,i])$GPP
gpp_test[,i] <- PRELES(PAR=hyytiala_test$PAR, TAir=hyytiala_test$Tair, VPD=hyytiala_test$VPD, Precip=hyytiala_test$Precip, CO2=hyytiala_test$CO2, fAPAR=hyytiala_test$fapar, p=CVfit[,i])$GPP
et_train[,i] <- PRELES(PAR=hyytiala_train$PAR, TAir=hyytiala_train$Tair, VPD=hyytiala_train$VPD, Precip=hyytiala_train$Precip, CO2=hyytiala_train$CO2, fAPAR=hyytiala_train$fapar, p=CVfit[,i])$ET
et_test[,i] <- PRELES(PAR=hyytiala_test$PAR, TAir=hyytiala_test$Tair, VPD=hyytiala_test$VPD, Precip=hyytiala_test$Precip, CO2=hyytiala_test$CO2, fAPAR=hyytiala_test$fapar, p=CVfit[,i])$ET
sw_train[,i] <- PRELES(PAR=hyytiala_train$PAR, TAir=hyytiala_train$Tair, VPD=hyytiala_train$VPD, Precip=hyytiala_train$Precip, CO2=hyytiala_train$CO2, fAPAR=hyytiala_train$fapar, p=CVfit[,i])$SW
sw_test[,i] <- PRELES(PAR=hyytiala_test$PAR, TAir=hyytiala_test$Tair, VPD=hyytiala_test$VPD, Precip=hyytiala_test$Precip, CO2=hyytiala_test$CO2, fAPAR=hyytiala_test$fapar, p=CVfit[,i])$SW
i <- i+1
}
## Update data set with new calibrated Preles predictions ##
hyytiala_train$GPPp <- apply(gpp_train, 1, mean)
hyytiala_test$GPPp <- apply(gpp_test, 1, mean)
hyytiala_train$ETp <- apply(et_train, 1, mean)
hyytiala_test$ETp <- apply(et_test, 1, mean)
hyytiala_train$SWp <- apply(sw_train, 1, mean)
hyytiala_test$SWp <- apply(sw_test, 1, mean)
if (save_data){
if (data_use == 'full'){
hyytialaF <- rbind(hyytiala_train, hyytiala_test)
write.csv(hyytialaF, file="~/PycharmProjects/physics_guided_nn/data/hyytialaF.csv", row.names = FALSE)
## Generate files for prediction results ##
save(gpp_train, file = "~/PycharmProjects/physics_guided_nn/data/GPPp_singlesite_train.Rdata")
save(gpp_test, file = "~/PycharmProjects/physics_guided_nn/data/GPPp_singlesite_test.Rdata")
}
}
GPP_train <- apply(gpp_train, 1, mean)
GPP_test <- apply(gpp_test, 1, mean)
GPP_train_std <- apply(gpp_train, 1, sd)
GPP_test_std <- apply(gpp_test, 1, sd)
mae <- function(yhat){
mae <- sum(abs(hyytiala_test$GPP - yhat))/length(yhat)
return(mae)
}
rmse <- function(yhat){
rmse <- sqrt(sum((hyytiala_test$GPP - yhat)^2)/length(yhat))
return(rmse)
}
perfpormance_preles_full <- matrix(NA, nrow=4, ncol=2)
perfpormance_preles_full[,1] <- apply(gpp_test, 2, rmse)
perfpormance_preles_full[,2] <- apply(gpp_test, 2, mae)
write.csv(perfpormance_preles_full, file=paste0("~/PycharmProjects/physics_guided_nn/results_final/preles_eval_", data_use, "_performance.csv"))
write.csv(gpp_test, file=paste0("~/PycharmProjects/physics_guided_nn/results_final/preles_eval_preds_test_", data_use, ".csv"))
}
singlesite_calibration(data_use = 'sparse')
CVfit = list()
year = 2009
data_use='sparse'
cvfit = load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
fit[0]
fit[1]
fit[2]
fit[3]
library(BayesianTools)
MAP(fit)
load("~/Projects/physics_guided_nn/data/parameterRanges.rdata") # parameter defaults/ranges
pars2tune <- c(5:11, 14:18, 31)
CVfit <- matrix(NA, nrow=nrow(pars),ncol = 4)
CVfit <- matrix(NA, nrow=nrow(par),ncol = 4)
CVfit[,i] <- par$def
i = 0
for (year in c(2009, 2010, 2011, 2012)){
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
CVfit[,i] <- par$def
CVfit[pars2tune,i] <- MAP(fit)$parametersMAP
i = i+1
}
View(CVfit)
CVfit <- matrix(NA, nrow=nrow(par),ncol = 4)
i = 1
for (year in c(2009, 2010, 2011, 2012)){
load(file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_fit_", year,"_", data_use, ".Rdata"))
CVfit[,i] <- par$def
CVfit[pars2tune,i] <- MAP(fit)$parametersMAP
i = i+1
}
save(CVfit, file = paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".Rdata"))
write.csv(CVfit, file=paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))
library(Rpreles)
predict <- function(x_test, data_use){
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))#[,2:6]
preds = matrix(nrow = nrow(x_test), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=x_test$PAR, TAir=x_test$Tair, VPD=x_test$VPD, Precip=x_test$Precip, CO2=x_test$CO2, fAPAR=x_test$fapar, p=CVfit[,i])$GPP
}
preds = apply(preds, 1, mean)
print(preds)
return(preds)
}
via <- function(data_use, gridsize = 200){
hyytiala <- read.csv("~/Projects/physics_guided_nn/data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
hyytiala_test <- hyytiala_test[2:nrow(hyytiala_test),] # remove first day of year (Niklas, why?)
variables = c('PAR', 'Tair', 'VPD', 'Precip', 'fapar')
thresholds = data.frame('PAR' = c(0, 200), 'Tair'= c(-20, 40), 'VPD' = c(0, 60), 'Precip'= c(0, 100), 'fapar'= c(0, 1))
for (v in variables){
var_range = seq(thresholds[v][1,], thresholds[v][2,], length.out=gridsize)
day_names = c("mar", "jun", "sep", "dec")
x_test = hyytiala_test
mar = with(hyytiala_test, hyytiala_test[(date >= "2008-03-13" & date <= "2008-03-27"),])[,c(3:11)]
#mar = data.frame(as.list(colMeans(mar)))[rep(1, times=gridsize),]
#mar = data.frame(mar)
jun = with(hyytiala_test, hyytiala_test[(date >= "2008-06-14" & date <= "2008-06-28"),])[,c(3:11)]
#jun = data.frame(as.list(colMeans(jun)))[rep(1, times=gridsize),]
sep = with(hyytiala_test, hyytiala_test[(date >= "2008-09-13" & date <= "2008-09-27"),])[,c(3:11)]
#sep = data.frame(as.list(colMeans(sep)))[rep(1, times=gridsize),]
dec = with(hyytiala_test, hyytiala_test[(date >= "2008-12-14" & date <= "2008-12-28"),])[,c(3:11)]
#dec = data.frame(as.list(colMeans(dec)))[rep(1, times=gridsize),]
days = list(mar, jun, sep, dec)
n = 1
for (day in days){
print(nrow(day))
output = matrix(nrow = length(var_range), ncol = 15)
for (j in 1:length(var_range)){
day[v] = var_range[j]
preds = predict(day, data_use)
print(j)
output[j,] = preds
}
write.csv(output, paste0("~/Projects/physics_guided_nn/results/preles_", data_use, "_", v, "_via_cond_", day_names[n], ".csv"))
n = n+1
}
#output = cbind(var_range, output)
}
return(output)
}

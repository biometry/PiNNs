)
# Display the map
europe_map
europe_map <- addPolygons(
map = europe_map,
data = world,
color = "black",
weight = 1,
fillOpacity = 0,
)
europe_map <- addMarkers(
lng = locations$Lon[i],
lat = locations$Lat[i],
popup = locations$Name[i]
)
europe_map <- addMarkers(
map = europe_map,
lng = locations$Lon[i],
lat = locations$Lat[i],
popup = locations$Name[i]
)
europe_map
library(Rpreles)
prediction_scenario = 'exp2'
data_use = 'full'
if (prediction_scenario == 'exp1'){
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytialaF_", data_use, ".csv")
}else{
hyytiala <- read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/allsitesF_", prediction_scenario, "_", data_use, ".csv"))
}
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
if (prediction_scenario == 'exp1'){
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
}else if (prediction_scenario == 'exp2'){
hyytiala_train <- hyytiala[(hyytiala$site %in% c("sr","bz", "ly", "co")), ]
hyytiala_test <- hyytiala[((hyytiala$site == "h") & (hyytiala$year != 2004)), ]
}else if (prediction_scenario =='exp3'){
hyytiala_train <- hyytiala[(hyytiala$site %in% c("sr","bz", "ly", "co")), ]
hyytiala_train <- hyytiala_train[(hyytiala_train$year %in% c("2005", "2004")), ]
hyytiala_test <- hyytiala[((hyytiala$site == "h") & (hyytiala$year == "2008")), ]
}
hyytiala_test <- hyytiala_test[2:nrow(hyytiala_test),] # remove first day of year (Niklas, why?)
v='PAR'
thresholds = data.frame('PAR' = c(min(hyytiala_test$PAR), max(hyytiala_test$PAR)), 'Tair'= c(min(hyytiala_test$Tair), max(hyytiala_test$Tair)), 'VPD' = c(min(hyytiala_test$VPD), max(hyytiala_test$VPD)), 'Precip'= c(min(hyytiala_test$Precip), max(hyytiala_test$Precip)), 'fapar'= c(min(hyytiala_test$fapar), max(hyytiala_test$fapar)))
var_range = seq(thresholds[v][1,], thresholds[v][2,], length.out=gridsize)
gridsize=200
var_range = seq(thresholds[v][1,], thresholds[v][2,], length.out=gridsize)
day_names = c("mar", "jun", "sep", "dec")
x_test = hyytiala_test
if (prediction_scenario == 'spatial'){x_test$X = gsub("[^a-zA-Z]", "", x_test$X)}
mar = with(x_test, x_test[(date >= "2008-03-13" & date <= "2008-03-27"),])[,c(3:13)]
jun = with(x_test, x_test[(date >= "2008-06-14" & date <= "2008-06-28"),])[,c(3:13)]
sep = with(x_test, x_test[(date >= "2008-09-13" & date <= "2008-09-27"),])[,c(3:13)]
dec = with(x_test, x_test[(date >= "2008-12-14" & date <= "2008-12-28"),])[,c(3:13)]
days = list(mar, jun, sep, dec)
View(dec)
output = matrix(nrow = length(var_range), ncol = nrow(day))
day=mar
output = matrix(nrow = length(var_range), ncol = nrow(day))
j=1
day[v] = var_range[j]
View(mar)
View(day)
if (prediction_scenario =='exp1'){
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))#[,2:6]
}else{
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Pmultisite_CVfit_", data_use, "_", prediction_scenario, ".csv"))[,2:5]
}
df = day
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
View(preds)
df
View(CVfit)
matplot(preds)
matplot(preds, type='l')
View(df)
CVfit
View(mar)
View(dec)
day = dec
day[v] = var_range[j]
df = day
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
df = dec
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
df = hyytiala_test
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
df = jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
df$DOY
jan = hyytiala_test[1:14,]
df = day
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
df = jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, 'l')
matplot(preds, type='l')
View(hyytiala_test)
jan = hyytiala_test[366:386,]
View(jan)
df = jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
df = jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
jan
jan2 = hyytiala_test[366:380,]
jan2
jan2 = hyytiala_test[365:380,]
jan2
jan2 = hyytiala_test[365:379,c(3:13)]
jan==jan2
sum(jan==jan2)
df=jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
df=jan2
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan2 = hyytiala_test[365:379,]
df=jan2
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan2 = hyytiala_test[365:379,c(3:13)]
jan2 = hyytiala_test[365:379,]
jan2 = hyytiala_test[365:379,]
df=jan2
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
jan2 = hyytiala_test[365:379,c(3:13)]
jan2 = hyytiala_test[365:379,]
jan2 = hyytiala_test[365:379,]
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
jan2 = hyytiala_test[365:379,c(3:13)]
jan=jan2
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
jan2 = hyytiala_test[365:379,c(3:13)]
jan==jan2
df=jan
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
df=jan2
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan2 = hyytiala_test[365:379,]
df=jan2
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
matplot(preds, type='l')
jan2$PAR
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:13)]
jan$PAR
PRELES(PAR=jan$PAR, TAir=jan$Tair, VPD=jan$VPD, Precip=jan$Precip, CO2=jan$CO2, fAPAR=jan$fapar, DOY = jan$DOY, p=CVfit[,i])$GPP
PRELES(PAR=jan2$PAR, TAir=jan2$Tair, VPD=jan2$VPD, Precip=jan2$Precip, CO2=jan2$CO2, fAPAR=jan2$fapar, DOY = jan2$DOY, p=CVfit[,i])$GPP
jan2$DOY == jan$DOY
jan2$CO2 == jan$CO2
jan = with(x_test, x_test[(date >= "2008-01-01" & date <= "2008-01-15"),])[,c(3:14)]
PRELES(PAR=jan$PAR, TAir=jan$Tair, VPD=jan$VPD, Precip=jan$Precip, CO2=jan$CO2, fAPAR=jan$fapar, DOY = jan$DOY, p=CVfit[,i])$GPP
library(Rpreles)
#data_use = 'full'
#prediction_scenario = 'spatial'
#gridsize=200
predict_via <- function(day, data_use, prediction_scenario, point_wise = FALSE){
if (prediction_scenario =='exp1'){
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Psinglesite_CVfit_", data_use, ".csv"))#[,2:6]
}else{
CVfit = read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/Pmultisite_CVfit_", data_use, "_", prediction_scenario, ".csv"))[,2:5]
}
if (prediction_scenario == 'exp1'){
preds = matrix(nrow = nrow(day), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=day$PAR, TAir=day$Tair, VPD=day$VPD, Precip=day$Precip, CO2=day$CO2, fAPAR=day$fapar, p=CVfit[,i])$GPP
}
preds = apply(preds, 1, mean)
}else{
if (point_wise){
points <- unique(day$X)
preds_sitewise <- numeric(length(points))
for (point in points){
df <- day[day$X==point,]
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
preds <- apply(preds, 1, mean)
preds_sitewise[point] <- preds
}
}else{
df = day
preds <- matrix(nrow = nrow(df), ncol=ncol(CVfit))
for (i in 1:ncol(CVfit)){
preds[,i] = PRELES(PAR=df$PAR, TAir=df$Tair, VPD=df$VPD, Precip=df$Precip, CO2=df$CO2, fAPAR=df$fapar, DOY = df$DOY, p=CVfit[,i])$GPP
}
preds <- apply(preds, 1, mean)
}
}
return(preds)
}
via <- function(data_use, prediction_scenario, gridsize = 200, point_wise = FALSE){
if (prediction_scenario == 'exp1'){
hyytiala <- read.csv("~/PycharmProjects/physics_guided_nn/data/hyytialaF_", data_use, ".csv")
}else{
hyytiala <- read.csv(paste0("~/PycharmProjects/physics_guided_nn/data/allsitesF_", prediction_scenario, "_", data_use, ".csv"))
}
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
if (prediction_scenario == 'exp1'){
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
}else if (prediction_scenario == 'exp2'){
hyytiala_train <- hyytiala[(hyytiala$site %in% c("sr","bz", "ly", "co")), ]
hyytiala_test <- hyytiala[((hyytiala$site == "h") & (hyytiala$year != 2004)), ]
}else if (prediction_scenario =='exp3'){
hyytiala_train <- hyytiala[(hyytiala$site %in% c("sr","bz", "ly", "co")), ]
hyytiala_train <- hyytiala_train[(hyytiala_train$year %in% c("2005", "2004")), ]
hyytiala_test <- hyytiala[((hyytiala$site == "h") & (hyytiala$year == "2008")), ]
}
hyytiala_test <- hyytiala_test[2:nrow(hyytiala_test),] # remove first day of year (Niklas, why?)
variables = c('PAR', 'Tair', 'VPD', 'Precip', 'fapar')
thresholds = data.frame('PAR' = c(min(hyytiala_test$PAR), max(hyytiala_test$PAR)), 'Tair'= c(min(hyytiala_test$Tair), max(hyytiala_test$Tair)), 'VPD' = c(min(hyytiala_test$VPD), max(hyytiala_test$VPD)), 'Precip'= c(min(hyytiala_test$Precip), max(hyytiala_test$Precip)), 'fapar'= c(min(hyytiala_test$fapar), max(hyytiala_test$fapar)))
for (v in variables){
var_range = seq(thresholds[v][1,], thresholds[v][2,], length.out=gridsize)
day_names = c("mar", "jun", "sep", "dec")
x_test = hyytiala_test
if (prediction_scenario == 'spatial'){x_test$X = gsub("[^a-zA-Z]", "", x_test$X)}
mar = with(x_test, x_test[(date >= "2008-03-13" & date <= "2008-03-27"),])[,c(3:14)]
jun = with(x_test, x_test[(date >= "2008-06-14" & date <= "2008-06-28"),])[,c(3:14)]
sep = with(x_test, x_test[(date >= "2008-09-13" & date <= "2008-09-27"),])[,c(3:14)]
dec = with(x_test, x_test[(date >= "2008-12-14" & date <= "2008-12-28"),])[,c(3:14)]
days = list(mar, jun, sep, dec)
n = 1
for (day in days){
day = day
output = matrix(nrow = length(var_range), ncol = nrow(day))
for (j in 1:length(var_range)){
day[v] = var_range[j]
preds = predict_via(day, data_use, prediction_scenario, point_wise = point_wise)
output[j,] = preds
}
write.csv(output, paste0("~/PycharmProjects/physics_guided_nn/results_", prediction_scenario, "/via/preles_", data_use, "_", v, "_via_cond_", day_names[n], ".csv"))
n = n+1
}
}
}
via(data_use = "full",prediction_scenario =  "exp2", gridsize = 200, point_wise = FALSE)
via(data_use = "sparse",prediction_scenario =  "exp2", gridsize = 200, point_wise = FALSE)
via(data_use = "full", prediction_scenario = "exp3", gridsize = 200, point_wise = FALSE)
via(data_use = "sparse", prediction_scenario = "exp3", gridsize = 200, point_wise = FALSE)
# Forecasting with Preles
library(Rpreles)
library(dplyr)
library(BayesianTools)
source('get_data.R')
library(Rpreles)
library(BayesianTools)
setwd("~/PycharmProjects/PiNNs")
source("r/helpers.R")
load("data/parameterRanges.rdata") # parameter defaults/ranges
# par # note that "-999" is supposed to indiate NA!
pars <- par # unfortunate naming "par" replaced by "pars"
rm(par)
pars[pars=="-999"] <- NA
pars # note that some parameters are set without uncertainty (e.g. soildepth)
# jetzt neu: S[max]
#pars[pars$name=="S[max]", 4] <- 45 # was 30
#  S[max]: tick
pars[pars$name=="nu", 4] <- 10 # was 5
# select the parameters to be calibrated:
pars2tune <- c(5:11, 14:18, 31) # note that we omit 32, as it refers to ET
thispar <- pars$def
names(thispar) <- pars$name
hyytiala <- read.csv("data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
results <- matrix(nrow = 15, ncol = 3)
results[,1] <- seq(from =1, to = 5, length.out =15)
for (i in c(1:15)){
ell <- function(pars, data=hyytiala_train){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, sum(dnorm(hyytiala_train$GPP, mean=PRELES(PAR=hyytiala_train$PAR,
TAir=hyytiala_train$Tair,
VPD=hyytiala_train$VPD,
Precip=hyytiala_train$Precip,
CO2=hyytiala_train$CO2,
fAPAR=hyytiala_train$fapar ,
p=thispar)$GPP, sd=results[i,1], log=T)))
}
priors <- createUniformPrior(lower=pars$min[pars2tune], upper=pars$max[pars2tune], best=pars$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pars
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
gpp_preds <- PRELES(PAR=hyytiala_test$PAR, TAir=hyytiala_test$Tair, VPD=hyytiala_test$VPD, Precip=hyytiala_test$Precip, CO2=hyytiala_test$CO2, fAPAR=hyytiala_test$fapar, p=pars_fit$def)$GPP
rmse <- function(x, x_hat){
return(sqrt(mean((x-x_hat)**2)))
}
mae <- function(x, x_hat){
return(mean(abs(x-x_hat)))
}
results[i,2] <- rmse(gpp_preds, hyytiala_test$GPP)
results[i,3] <- mae(gpp_preds, hyytiala_test$GPP)
}
plot( hyytiala_test$GPP, type='l')
lines(gpp_preds, col="red")
summary(lm(results[,3] ~ results[,1]))
summary(lm(results[,2] ~ results[,1]))
plot(lm(results[,2] ~ results[,1]))
par(mfrow=c(1, 2))
plot(round(results[,1], 2), results[,2], type="l", ylab = "RMSE", xlab = "Standard dev. in BC")
#abline(lm1, col="red")
plot(round(results[,1], 2), results[,3], type="l", ylab = "MAE", xlab = "Standard dev. in BC")
#abline(lm2, col="red")
View(pars)
load("data/parameterRanges.rdata") # parameter defaults/ranges
# par # note that "-999" is supposed to indiate NA!
pararms <- par # unfortunate naming "par" replaced by "pararms"
rm(par)
pararms[pararms=="-999"] <- NA
pararms # note that some parameters are set without uncertainty (e.g. soildepth)
# jetzt neu: S[max]
#pars[pars$name=="S[max]", 4] <- 45 # was 30
#  S[max]: tick
pararms[pararms$name=="nu", 4] <- 10 # was 5
# select the parameters to be calibrated:
pars2tune <- c(5:11, 14:18, 31) # note that we omit 32, as it refers to ET
thispar <- pararms$def
names(thispar) <- pararms$name
hyytiala <- read.csv("data/hyytiala.csv")
hyytiala$date <- as.Date(hyytiala$date)
hyytiala$year <- format(hyytiala$date, format="%Y")
hyytiala_train <- hyytiala[!(hyytiala$year %in% c("2008", "2007", "2005", "2004")), ]
hyytiala_test <- hyytiala[hyytiala$year == "2008", ]
results <- matrix(nrow = 15, ncol = 3)
results[,1] <- seq(from =1, to = 5, length.out =15)
rm(pars)
thispar[pars2tune]
thispar[pars2tune][-1]
thispar[pars2tune][length(thispar)]
length(thispar)
thispar[pars2tune][length(thispar[pars2tune])]
View(pars_fit)
ell <- function(pars, data=hyytiala_train){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, sum(dnorm(hyytiala_train$GPP, mean=PRELES(PAR=hyytiala_train$PAR,
TAir=hyytiala_train$Tair,
VPD=hyytiala_train$VPD,
Precip=hyytiala_train$Precip,
CO2=hyytiala_train$CO2,
fAPAR=hyytiala_train$fapar ,
p=thispar)$GPP, sd=pars[length(pars)], log=T)))
}
priors <- createUniformPrior(lower=pararms$min[pars2tune], upper=pararms$max[pars2tune], best=pararms$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pararms
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
pars_fit$def
View(pars_fit)
getwd()
pdf(file=paste0("~/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
pdf(file=paste0("/Users/mw1205/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$X)){ # loop over parameters fitted
plot(density(ests[,i], from=min(ests[,i]), to=max(ests[,i])), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
}
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$X)){ # loop over parameters fitted
plot(density(fit[[1]]$X), from=min(fit[[1]]$X), to=max(fit[[1]]$X), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
}
dev.off()
fit[[1]]$X
density(fit[[1]])
fit[[1]]
fit[[1]]$Z
dim(fit[[1]]$Z)
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
}
dev.off()
MAP(fit)$parametersMAP
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
text(x=min(fit[[1]]$Z[,i]), y=max(density(fit[[1]]$Z[,i])$y), labels=round(MAP(fit)$parametersMAP[i],2), pos=4, cex=0.8) # Add number in upper left corner
}
dev.off()
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
text(x=min(fit[[1]]$Z[,i]), y=max(density(fit[[1]]$Z[,i])$y), labels=round(MAP(fit)$parametersMAP[i],2), pos=4, cex=4) # Add number in upper left corner
}
dev.off()
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
text(x=min(fit[[1]]$Z[,i]), y=max(density(fit[[1]]$Z[,i])$y), labels=round(MAP(fit)$parametersMAP[i],2), pos=4, cex=2) # Add number in upper left corner
}
dev.off()
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
text(x=min(fit[[1]]$Z[,i]), y=max(density(fit[[1]]$Z[,i])$y), labels=round(MAP(fit)$parametersMAP[i],2), pos=4, cex=1.2) # Add number in upper left corner
}
dev.off()
ell <- function(pars, data=hyytiala_train){
# pars is a vector the same length as pars2tune
thispar[pars2tune] <- pars
# likelihood function, first shot: normal density
with(data, sum(dnorm(hyytiala_train$GPP, mean=PRELES(PAR=hyytiala_train$PAR,
TAir=hyytiala_train$Tair,
VPD=hyytiala_train$VPD,
Precip=hyytiala_train$Precip,
CO2=hyytiala_train$CO2,
fAPAR=hyytiala_train$fapar ,
p=thispar)$GPP, sd=1, log=T)))
}
priors <- createUniformPrior(lower=pararms$min[pars2tune], upper=pararms$max[pars2tune], best=pararms$def[pars2tune])
setup <- createBayesianSetup(likelihood=ell, prior=priors, parallel=T)
settings <- list(iterations=50000, adapt=T, nrChains=3, parallel=T) # runs 3 chains in parallel for each chain ...
# run:
fit <- runMCMC(bayesianSetup = setup, settings = settings, sampler = "DREAMzs")
pars_fit <- pararms
pars_fit$def[pars2tune] <- MAP(fit)$parametersMAP
pdf(file=paste0("/Users/mw1205/Library/Mobile Documents/com~apple~CloudDocs/Projects/physics_guided_nn_meta/manuscript/revisions/PRELES_no_sd_fit.pdf"), width=15, height=12)
par(mfrow=c(4, 4), mar=c(3,3,3,1))
for (i in 1:ncol(fit[[1]]$Z)){ # loop over parameters fitted
plot(density(fit[[1]]$Z[,i]), from=min(fit[[1]]$Z[,i]), to=max(fit[[1]]$Z[,i]), main=pararms[pars2tune[i],1], las=1)
abline(v=pararms[pars2tune[i], 3:4], col="red")
text(x=min(fit[[1]]$Z[,i]), y=max(density(fit[[1]]$Z[,i])$y), labels=round(MAP(fit)$parametersMAP[i],2), pos=4, cex=1.2) # Add number in upper left corner
}
dev.off()
summary(lm(results[,3] ~ results[,1]))
summary(lm(results[,2] ~ results[,1]))
